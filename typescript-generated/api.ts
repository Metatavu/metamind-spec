// tslint:disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<any>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {number}
     * @memberof BadRequest
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof BadRequest
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * 
     * @type {number}
     * @memberof Forbidden
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof Forbidden
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {number}
     * @memberof InternalServerError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Message id
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     * Session id the message belongs to
     * @type {string}
     * @memberof Message
     */
    sessionId?: string;
    /**
     * Message content
     * @type {string}
     * @memberof Message
     */
    content?: string;
    /**
     * Response text. Used only when responding
     * @type {string}
     * @memberof Message
     */
    response?: string;
    /**
     * Hint text. Used only when responding
     * @type {string}
     * @memberof Message
     */
    hint?: string;
    /**
     * List of quick responses. Used only when responding
     * @type {Array&lt;string&gt;}
     * @memberof Message
     */
    quickResponses?: Array<string>;
    /**
     * Time the session was initiated
     * @type {string}
     * @memberof Message
     */
    created?: string;
}

/**
 * 
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * 
     * @type {number}
     * @memberof NotFound
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface NotImplemented
 */
export interface NotImplemented {
    /**
     * 
     * @type {number}
     * @memberof NotImplemented
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof NotImplemented
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface Script
 */
export interface Script {
    /**
     * Script id
     * @type {string}
     * @memberof Script
     */
    id?: string;
    /**
     * Script name
     * @type {string}
     * @memberof Script
     */
    name: string;
    /**
     * Script version
     * @type {string}
     * @memberof Script
     */
    version: string;
    /**
     * Script language
     * @type {string}
     * @memberof Script
     */
    language: string;
    /**
     * Script content
     * @type {string}
     * @memberof Script
     */
    content: string;
}

/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Session id.
     * @type {string}
     * @memberof Session
     */
    id?: string;
    /**
     * Session locale
     * @type {string}
     * @memberof Session
     */
    locale?: string;
    /**
     * Session time zone
     * @type {string}
     * @memberof Session
     */
    timeZone?: string;
    /**
     * Visitor details
     * @type {string}
     * @memberof Session
     */
    visitor?: string;
    /**
     * Story name
     * @type {string}
     * @memberof Session
     */
    story?: string;
    /**
     * Time the session was initiated
     * @type {string}
     * @memberof Session
     */
    created?: string;
}


/**
 * MessagesApi - fetch parameter creator
 * @export
 */
export const MessagesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Posts new message
         * @summary Posts new message
         * @param {Message} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(body: Message, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMessage.');
            }
            const path = `/messages`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                headerParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Posts new message
         * @summary Posts new message
         * @param {Message} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(body: Message, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const fetchArgs = MessagesApiFetchParamCreator(configuration).createMessage(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Posts new message
         * @summary Posts new message
         * @param {Message} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(body: Message, options?: any) {
            return MessagesApiFp(configuration).createMessage(body, options)(fetch, basePath);
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * Posts new message
     * @summary Posts new message
     * @param {} body Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public createMessage(body: Message, options?: any) {
        return MessagesApiFp(this.configuration).createMessage(body, options)(this.fetch, this.basePath);
    }

}

/**
 * ScriptsApi - fetch parameter creator
 * @export
 */
export const ScriptsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Posts new script
         * @summary Posts new script
         * @param {Script} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: Script, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createScript.');
            }
            const path = `/scripts`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                headerParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * ScriptsApi - functional programming interface
 * @export
 */
export const ScriptsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Posts new script
         * @summary Posts new script
         * @param {Script} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: Script, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Script> {
            const fetchArgs = ScriptsApiFetchParamCreator(configuration).createScript(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ScriptsApi - factory interface
 * @export
 */
export const ScriptsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Posts new script
         * @summary Posts new script
         * @param {Script} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: Script, options?: any) {
            return ScriptsApiFp(configuration).createScript(body, options)(fetch, basePath);
        },
    };
};

/**
 * ScriptsApi - object-oriented interface
 * @export
 * @class ScriptsApi
 * @extends {BaseAPI}
 */
export class ScriptsApi extends BaseAPI {
    /**
     * Posts new script
     * @summary Posts new script
     * @param {} body Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptsApi
     */
    public createScript(body: Script, options?: any) {
        return ScriptsApiFp(this.configuration).createScript(body, options)(this.fetch, this.basePath);
    }

}

/**
 * SessionsApi - fetch parameter creator
 * @export
 */
export const SessionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates new chat session
         * @summary Creates new session
         * @param {Session} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(body: Session, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSession.');
            }
            const path = `/sessions`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                headerParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates new chat session
         * @summary Creates new session
         * @param {Session} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(body: Session, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Session> {
            const fetchArgs = SessionsApiFetchParamCreator(configuration).createSession(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates new chat session
         * @summary Creates new session
         * @param {Session} body Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(body: Session, options?: any) {
            return SessionsApiFp(configuration).createSession(body, options)(fetch, basePath);
        },
    };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
    /**
     * Creates new chat session
     * @summary Creates new session
     * @param {} body Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public createSession(body: Session, options?: any) {
        return SessionsApiFp(this.configuration).createSession(body, options)(this.fetch, this.basePath);
    }

}

