/*
 * Metamind API
 * Brain spec for Metamind.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.metamind.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.metatavu.metamind.client.model.KnotType;
import fi.metatavu.metamind.client.model.TokenizerType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Knot
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-06T06:25:01.499+03:00[Europe/Helsinki]")public class Knot {

  @JsonProperty("id")

  private UUID id = null;

  @JsonProperty("type")

  private KnotType type = null;

  @JsonProperty("tokenizer")

  private TokenizerType tokenizer = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("content")

  private String content = null;

  @JsonProperty("hint")

  private String hint = null;

  @JsonProperty("storyId")

  private UUID storyId = null;

  @JsonProperty("createdAt")

  private OffsetDateTime createdAt = null;

  @JsonProperty("modifiedAt")

  private OffsetDateTime modifiedAt = null;
  /**
  * knot id.
  * @return id
  **/
  @Schema(description = "knot id.")
  public UUID getId() {
    return id;
  }
  public Knot type(KnotType type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public KnotType getType() {
    return type;
  }
  public void setType(KnotType type) {
    this.type = type;
  }
  public Knot tokenizer(TokenizerType tokenizer) {
    this.tokenizer = tokenizer;
    return this;
  }

  

  /**
  * Get tokenizer
  * @return tokenizer
  **/
  @Schema(required = true, description = "")
  public TokenizerType getTokenizer() {
    return tokenizer;
  }
  public void setTokenizer(TokenizerType tokenizer) {
    this.tokenizer = tokenizer;
  }
  public Knot name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Knot content(String content) {
    this.content = content;
    return this;
  }

  

  /**
  * Get content
  * @return content
  **/
  @Schema(required = true, description = "")
  public String getContent() {
    return content;
  }
  public void setContent(String content) {
    this.content = content;
  }
  public Knot hint(String hint) {
    this.hint = hint;
    return this;
  }

  

  /**
  * Get hint
  * @return hint
  **/
  @Schema(description = "")
  public String getHint() {
    return hint;
  }
  public void setHint(String hint) {
    this.hint = hint;
  }
  /**
  * Story id
  * @return storyId
  **/
  @Schema(description = "Story id")
  public UUID getStoryId() {
    return storyId;
  }
  /**
  * Creation time
  * @return createdAt
  **/
  @Schema(description = "Creation time")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  /**
  * Last modification time
  * @return modifiedAt
  **/
  @Schema(description = "Last modification time")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Knot knot = (Knot) o;
    return Objects.equals(this.id, knot.id) &&
        Objects.equals(this.type, knot.type) &&
        Objects.equals(this.tokenizer, knot.tokenizer) &&
        Objects.equals(this.name, knot.name) &&
        Objects.equals(this.content, knot.content) &&
        Objects.equals(this.hint, knot.hint) &&
        Objects.equals(this.storyId, knot.storyId) &&
        Objects.equals(this.createdAt, knot.createdAt) &&
        Objects.equals(this.modifiedAt, knot.modifiedAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, type, tokenizer, name, content, hint, storyId, createdAt, modifiedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Knot {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tokenizer: ").append(toIndentedString(tokenizer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    hint: ").append(toIndentedString(hint)).append("\n");
    sb.append("    storyId: ").append(toIndentedString(storyId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
