/*
 * Metamind API
 * Brain spec for Metamind.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.metamind.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.metatavu.metamind.client.model.IntentType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * ExportedStoryIntent
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-10T13:55:11.126+02:00[Europe/Helsinki]")public class ExportedStoryIntent {

  @JsonProperty("id")

  private UUID id = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("quickResponse")

  private String quickResponse = null;

  @JsonProperty("quickResponseOrder")

  private Integer quickResponseOrder = null;

  @JsonProperty("type")

  private IntentType type = null;

  @JsonProperty("sourceKnotId")

  private UUID sourceKnotId = null;

  @JsonProperty("targetKnotId")

  private UUID targetKnotId = null;

  @JsonProperty("global")

  private Boolean global = null;

  @JsonProperty("trainingMaterialIds")

  private List<UUID> trainingMaterialIds = null;
  public ExportedStoryIntent id(UUID id) {
    this.id = id;
    return this;
  }

  

  /**
  * intent id.
  * @return id
  **/
  @Schema(description = "intent id.")
  public UUID getId() {
    return id;
  }
  public void setId(UUID id) {
    this.id = id;
  }
  public ExportedStoryIntent name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ExportedStoryIntent quickResponse(String quickResponse) {
    this.quickResponse = quickResponse;
    return this;
  }

  

  /**
  * Get quickResponse
  * @return quickResponse
  **/
  @Schema(description = "")
  public String getQuickResponse() {
    return quickResponse;
  }
  public void setQuickResponse(String quickResponse) {
    this.quickResponse = quickResponse;
  }
  public ExportedStoryIntent quickResponseOrder(Integer quickResponseOrder) {
    this.quickResponseOrder = quickResponseOrder;
    return this;
  }

  

  /**
  * Get quickResponseOrder
  * @return quickResponseOrder
  **/
  @Schema(required = true, description = "")
  public Integer getQuickResponseOrder() {
    return quickResponseOrder;
  }
  public void setQuickResponseOrder(Integer quickResponseOrder) {
    this.quickResponseOrder = quickResponseOrder;
  }
  public ExportedStoryIntent type(IntentType type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public IntentType getType() {
    return type;
  }
  public void setType(IntentType type) {
    this.type = type;
  }
  public ExportedStoryIntent sourceKnotId(UUID sourceKnotId) {
    this.sourceKnotId = sourceKnotId;
    return this;
  }

  

  /**
  * source knot id.
  * @return sourceKnotId
  **/
  @Schema(description = "source knot id.")
  public UUID getSourceKnotId() {
    return sourceKnotId;
  }
  public void setSourceKnotId(UUID sourceKnotId) {
    this.sourceKnotId = sourceKnotId;
  }
  public ExportedStoryIntent targetKnotId(UUID targetKnotId) {
    this.targetKnotId = targetKnotId;
    return this;
  }

  

  /**
  * target knot id.
  * @return targetKnotId
  **/
  @Schema(required = true, description = "target knot id.")
  public UUID getTargetKnotId() {
    return targetKnotId;
  }
  public void setTargetKnotId(UUID targetKnotId) {
    this.targetKnotId = targetKnotId;
  }
  public ExportedStoryIntent global(Boolean global) {
    this.global = global;
    return this;
  }

  

  /**
  * Get global
  * @return global
  **/
  @Schema(required = true, description = "")
  public Boolean isGlobal() {
    return global;
  }
  public void setGlobal(Boolean global) {
    this.global = global;
  }
  public ExportedStoryIntent trainingMaterialIds(List<UUID> trainingMaterialIds) {
    this.trainingMaterialIds = trainingMaterialIds;
    return this;
  }

  public ExportedStoryIntent addTrainingMaterialIdsItem(UUID trainingMaterialIdsItem) {
    if (this.trainingMaterialIds == null) {
      this.trainingMaterialIds = new ArrayList<>();
    }
    this.trainingMaterialIds.add(trainingMaterialIdsItem);
    return this;
  }

  /**
  * Get trainingMaterialIds
  * @return trainingMaterialIds
  **/
  @Schema(description = "")
  public List<UUID> getTrainingMaterialIds() {
    return trainingMaterialIds;
  }
  public void setTrainingMaterialIds(List<UUID> trainingMaterialIds) {
    this.trainingMaterialIds = trainingMaterialIds;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportedStoryIntent exportedStoryIntent = (ExportedStoryIntent) o;
    return Objects.equals(this.id, exportedStoryIntent.id) &&
        Objects.equals(this.name, exportedStoryIntent.name) &&
        Objects.equals(this.quickResponse, exportedStoryIntent.quickResponse) &&
        Objects.equals(this.quickResponseOrder, exportedStoryIntent.quickResponseOrder) &&
        Objects.equals(this.type, exportedStoryIntent.type) &&
        Objects.equals(this.sourceKnotId, exportedStoryIntent.sourceKnotId) &&
        Objects.equals(this.targetKnotId, exportedStoryIntent.targetKnotId) &&
        Objects.equals(this.global, exportedStoryIntent.global) &&
        Objects.equals(this.trainingMaterialIds, exportedStoryIntent.trainingMaterialIds);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, name, quickResponse, quickResponseOrder, type, sourceKnotId, targetKnotId, global, trainingMaterialIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportedStoryIntent {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quickResponse: ").append(toIndentedString(quickResponse)).append("\n");
    sb.append("    quickResponseOrder: ").append(toIndentedString(quickResponseOrder)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceKnotId: ").append(toIndentedString(sourceKnotId)).append("\n");
    sb.append("    targetKnotId: ").append(toIndentedString(targetKnotId)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    trainingMaterialIds: ").append(toIndentedString(trainingMaterialIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
