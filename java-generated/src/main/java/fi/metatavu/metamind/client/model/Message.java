/*
 * Metamind API
 * Brain spec for Metamind.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.metamind.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Message
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-01T13:56:30.401+03:00[Europe/Helsinki]")public class Message {

  @JsonProperty("id")

  private UUID id = null;

  @JsonProperty("sessionId")

  private UUID sessionId = null;

  @JsonProperty("content")

  private String content = null;

  @JsonProperty("response")

  private List<String> response = null;

  @JsonProperty("hint")

  private String hint = null;

  @JsonProperty("quickResponses")

  private List<String> quickResponses = null;

  @JsonProperty("confidence")

  private Double confidence = null;

  @JsonProperty("sourceKnotId")

  private UUID sourceKnotId = null;

  @JsonProperty("matchedIntentId")

  private UUID matchedIntentId = null;

  @JsonProperty("createdAt")

  private OffsetDateTime createdAt = null;

  @JsonProperty("modifiedAt")

  private OffsetDateTime modifiedAt = null;
  /**
  * Message id
  * @return id
  **/
  @Schema(description = "Message id")
  public UUID getId() {
    return id;
  }
  public Message sessionId(UUID sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  

  /**
  * Session id the message belongs to
  * @return sessionId
  **/
  @Schema(required = true, description = "Session id the message belongs to")
  public UUID getSessionId() {
    return sessionId;
  }
  public void setSessionId(UUID sessionId) {
    this.sessionId = sessionId;
  }
  public Message content(String content) {
    this.content = content;
    return this;
  }

  

  /**
  * Message content
  * @return content
  **/
  @Schema(required = true, description = "Message content")
  public String getContent() {
    return content;
  }
  public void setContent(String content) {
    this.content = content;
  }
  /**
  * Response text. Used only when responding
  * @return response
  **/
  @Schema(description = "Response text. Used only when responding")
  public List<String> getResponse() {
    return response;
  }
  /**
  * Hint text. Used only when responding
  * @return hint
  **/
  @Schema(description = "Hint text. Used only when responding")
  public String getHint() {
    return hint;
  }
  /**
  * List of quick responses. Used only when responding
  * @return quickResponses
  **/
  @Schema(description = "List of quick responses. Used only when responding")
  public List<String> getQuickResponses() {
    return quickResponses;
  }
  /**
  * Value how confident the bot was about the intent
  * @return confidence
  **/
  @Schema(description = "Value how confident the bot was about the intent")
  public Double getConfidence() {
    return confidence;
  }
  /**
  * source knot id id.
  * @return sourceKnotId
  **/
  @Schema(description = "source knot id id.")
  public UUID getSourceKnotId() {
    return sourceKnotId;
  }
  /**
  * matched intent id. Null if intent not found
  * @return matchedIntentId
  **/
  @Schema(description = "matched intent id. Null if intent not found")
  public UUID getMatchedIntentId() {
    return matchedIntentId;
  }
  /**
  * Creation time
  * @return createdAt
  **/
  @Schema(description = "Creation time")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  /**
  * Last modification time
  * @return modifiedAt
  **/
  @Schema(description = "Last modification time")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.id, message.id) &&
        Objects.equals(this.sessionId, message.sessionId) &&
        Objects.equals(this.content, message.content) &&
        Objects.equals(this.response, message.response) &&
        Objects.equals(this.hint, message.hint) &&
        Objects.equals(this.quickResponses, message.quickResponses) &&
        Objects.equals(this.confidence, message.confidence) &&
        Objects.equals(this.sourceKnotId, message.sourceKnotId) &&
        Objects.equals(this.matchedIntentId, message.matchedIntentId) &&
        Objects.equals(this.createdAt, message.createdAt) &&
        Objects.equals(this.modifiedAt, message.modifiedAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, sessionId, content, response, hint, quickResponses, confidence, sourceKnotId, matchedIntentId, createdAt, modifiedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    hint: ").append(toIndentedString(hint)).append("\n");
    sb.append("    quickResponses: ").append(toIndentedString(quickResponses)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    sourceKnotId: ").append(toIndentedString(sourceKnotId)).append("\n");
    sb.append("    matchedIntentId: ").append(toIndentedString(matchedIntentId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
