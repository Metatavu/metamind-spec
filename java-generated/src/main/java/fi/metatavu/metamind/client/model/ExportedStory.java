/*
 * Metamind API
 * Brain spec for Metamind.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.metamind.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.metatavu.metamind.client.model.ExportedStoryIntent;
import fi.metatavu.metamind.client.model.ExportedStoryKnot;
import fi.metatavu.metamind.client.model.ExportedStoryScript;
import fi.metatavu.metamind.client.model.ExportedStoryTrainingMaterial;
import fi.metatavu.metamind.client.model.ExportedStoryVariable;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * ExportedStory
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-10T13:55:11.126+02:00[Europe/Helsinki]")public class ExportedStory {

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("defaultHint")

  private String defaultHint = null;

  @JsonProperty("locale")

  private String locale = null;

  @JsonProperty("knots")

  private List<ExportedStoryKnot> knots = new ArrayList<>();

  @JsonProperty("variables")

  private List<ExportedStoryVariable> variables = new ArrayList<>();

  @JsonProperty("scripts")

  private List<ExportedStoryScript> scripts = new ArrayList<>();

  @JsonProperty("intents")

  private List<ExportedStoryIntent> intents = new ArrayList<>();

  @JsonProperty("trainingMaterials")

  private List<ExportedStoryTrainingMaterial> trainingMaterials = new ArrayList<>();
  public ExportedStory name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Story name.
  * @return name
  **/
  @Schema(required = true, description = "Story name.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ExportedStory defaultHint(String defaultHint) {
    this.defaultHint = defaultHint;
    return this;
  }

  

  /**
  * Default hint.
  * @return defaultHint
  **/
  @Schema(description = "Default hint.")
  public String getDefaultHint() {
    return defaultHint;
  }
  public void setDefaultHint(String defaultHint) {
    this.defaultHint = defaultHint;
  }
  public ExportedStory locale(String locale) {
    this.locale = locale;
    return this;
  }

  

  /**
  * Story locale.
  * @return locale
  **/
  @Schema(required = true, description = "Story locale.")
  public String getLocale() {
    return locale;
  }
  public void setLocale(String locale) {
    this.locale = locale;
  }
  public ExportedStory knots(List<ExportedStoryKnot> knots) {
    this.knots = knots;
    return this;
  }

  public ExportedStory addKnotsItem(ExportedStoryKnot knotsItem) {
    this.knots.add(knotsItem);
    return this;
  }

  /**
  * Get knots
  * @return knots
  **/
  @Schema(required = true, description = "")
  public List<ExportedStoryKnot> getKnots() {
    return knots;
  }
  public void setKnots(List<ExportedStoryKnot> knots) {
    this.knots = knots;
  }
  public ExportedStory variables(List<ExportedStoryVariable> variables) {
    this.variables = variables;
    return this;
  }

  public ExportedStory addVariablesItem(ExportedStoryVariable variablesItem) {
    this.variables.add(variablesItem);
    return this;
  }

  /**
  * Get variables
  * @return variables
  **/
  @Schema(required = true, description = "")
  public List<ExportedStoryVariable> getVariables() {
    return variables;
  }
  public void setVariables(List<ExportedStoryVariable> variables) {
    this.variables = variables;
  }
  public ExportedStory scripts(List<ExportedStoryScript> scripts) {
    this.scripts = scripts;
    return this;
  }

  public ExportedStory addScriptsItem(ExportedStoryScript scriptsItem) {
    this.scripts.add(scriptsItem);
    return this;
  }

  /**
  * Get scripts
  * @return scripts
  **/
  @Schema(required = true, description = "")
  public List<ExportedStoryScript> getScripts() {
    return scripts;
  }
  public void setScripts(List<ExportedStoryScript> scripts) {
    this.scripts = scripts;
  }
  public ExportedStory intents(List<ExportedStoryIntent> intents) {
    this.intents = intents;
    return this;
  }

  public ExportedStory addIntentsItem(ExportedStoryIntent intentsItem) {
    this.intents.add(intentsItem);
    return this;
  }

  /**
  * Get intents
  * @return intents
  **/
  @Schema(required = true, description = "")
  public List<ExportedStoryIntent> getIntents() {
    return intents;
  }
  public void setIntents(List<ExportedStoryIntent> intents) {
    this.intents = intents;
  }
  public ExportedStory trainingMaterials(List<ExportedStoryTrainingMaterial> trainingMaterials) {
    this.trainingMaterials = trainingMaterials;
    return this;
  }

  public ExportedStory addTrainingMaterialsItem(ExportedStoryTrainingMaterial trainingMaterialsItem) {
    this.trainingMaterials.add(trainingMaterialsItem);
    return this;
  }

  /**
  * Get trainingMaterials
  * @return trainingMaterials
  **/
  @Schema(required = true, description = "")
  public List<ExportedStoryTrainingMaterial> getTrainingMaterials() {
    return trainingMaterials;
  }
  public void setTrainingMaterials(List<ExportedStoryTrainingMaterial> trainingMaterials) {
    this.trainingMaterials = trainingMaterials;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportedStory exportedStory = (ExportedStory) o;
    return Objects.equals(this.name, exportedStory.name) &&
        Objects.equals(this.defaultHint, exportedStory.defaultHint) &&
        Objects.equals(this.locale, exportedStory.locale) &&
        Objects.equals(this.knots, exportedStory.knots) &&
        Objects.equals(this.variables, exportedStory.variables) &&
        Objects.equals(this.scripts, exportedStory.scripts) &&
        Objects.equals(this.intents, exportedStory.intents) &&
        Objects.equals(this.trainingMaterials, exportedStory.trainingMaterials);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, defaultHint, locale, knots, variables, scripts, intents, trainingMaterials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportedStory {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultHint: ").append(toIndentedString(defaultHint)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    knots: ").append(toIndentedString(knots)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    trainingMaterials: ").append(toIndentedString(trainingMaterials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
